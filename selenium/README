######################################################################
#
#   You must create two python modules (creds.py,defaults.py)

$ cat creds.py

username='youruser'
password='yourpassword'

$ cat defaults.py

base_url = 'http://mono-mac1.provo.novell.com'
testrunid = None

rc_server = 'localhost'
rc_port = 4444
rc_browser = '*chrome'

xsp1_port = 8081
xsp2_port = 8082
graffiti_port = 8083

logfile = None
debug = False


####################################################################
Setting up the selenium server:

Download the selenium rc server from http://seleniumhq.org/download/
Unzip the file and cd into selenium-remote-control-1.0-beta-2/selenium-server-1.0-beta-2

Run the selenium server with this command

$ java -jar selenium-server.jar -browserSessionReuse -forcedBrowserModeRestofLine *firefox3 /usr/lib/firefox/firefox [options]

Are there any firefox options that we can use to increase preformance?


####################################################################
Optional:

Download the selenium-core from http://seleniumhq.org/download/
Unzip the file on the test server machine
Link the selenium-core directory to the xsp tests directory

# Note the name change in the link
$ ln -s /home/users/linux/selenium-core /usr/share/mono/lib/xsp/tests/selenium-server

This url should resolve properly:
http://<testserver>.mono.lab.novell.com:8080/selenium-server/core/Blank.html

##################################################################
DESIGN PATTERNS

This might be the easiest way to code the pass/fail updating for Testopia

    tearDown(self):
        self.selenium.stop()
        updateTestCase(self.testcaseid,len(self.verificationErrors) == 0) #This method call
        self.assertEqual([], self.verificationErrors)

